name: Terraform Workflow

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the action to run'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform:
    name: Terraform Actions
    runs-on: ubuntu-latest

    steps:
      # Step 0: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1: Set up Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.2 # Replace with your Terraform version
      
      # Step:2 Check if state file exists (or .terraform directory exists)
      - name: Check for existing state or .terraform directory
        id: check_state
        run: |
          if [ -f "terraform.tfstate" ]; then
            echo "Terraform init is not required, state file or .terraform directory found."
            echo "skip_init=true" >> $GITHUB_ENV
          else
            echo "State file or .terraform directory not found, initializing Terraform."
            echo "skip_init=false" >> $GITHUB_ENV

      # Step3: Run terraform init if necessary
      - name: Terraform Init
        if: ${{ env.skip_init != 'true' }}  # Only run if skip_init is false
        run: terraform init

      # Step 4: Validate Terraform files
      - name: Terraform Validate
        run: terraform validate

      # Step 5: Terraform Plan
      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -out=plan.tfplan

      # Step 6: Terraform Apply
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve

      # Step 7: Terraform Destroy
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve

